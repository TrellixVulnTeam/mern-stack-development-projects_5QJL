/* Mobile-first design */
/************************
      General style
************************/

/* css reset */

html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
  margin: 0;
  padding: 0;
}

body {
  font-family: "Montserrat", sans-serif;
  font-size: 1rem;
  /* set color for paragraph as color for body */
  color: #404040;
  line-height: 1.6;
}

/************************
      Typography
************************/

h1,
h2,
strong {
  font-weight: 700;
}

.accent-color {
  color: #ffe600;
}

.hero-title {
  font-size: 1.5rem;
  /* for larger font size, decrease line-height */
  line-height: 1.4;
  margin-bottom: 0.8em;
}

/* title in info section */
.section-title {
  font-size: 1.125rem;
  color: #000;
  margin-top: 1.25em;
}

/************************
        Layout
************************/

/* buttons */
.btn {
  /* to make it a button, instead of width, height give padding to anchor element, x should be at least double of y */
  padding: 0.5em 1.75em;
  font-weight: 700;
  text-decoration: none;
  margin-top: 1.5em;
}

/* button at hero is inside hero grid container which takes middle grid column, means this button is a grid item and as no width, height is set for it so by default it will stretch */
.btn-primary {
  background-color: #ffe600;
  color: #000;
  justify-self: start;
}

/* navigation */

header {
  background: #000;
}

/* as header has main-grid class, so header is a grid container and header-content is a grid item. Set header-content to take the 2nd column in small screen. Also make the header-content a flex container to keep its content side by side */
.header-content {
  display: flex;
  grid-column: 2 / -2;
}

/* here logo has transparent background */
.logo-link {
  background: #ffe600;
  padding-top: 2em;
}

/* if there is no positioned ancestor for an absolute positioned element then it will be positioned relative to body */
.nav {
  background: #000;
  width: 100%;
  /* for mobile view, normally when hamburger is not clicked, keep the nav items to 100% left of the screen i.e. out of sight */
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 100%;
  /* normally no translate along X axis, but upon clicking hamburger menu, this transform property will get replaced by another with -100% */
  transform: translateX(0);
}

/* if we add .navigation-open class to nav element then it will bring the nav menus from right to left side along X axis by 100%. And if we remove this class then nav menus will slide out */
.navigation-open {
  transform: translateX(-100%);
}

.nav-list {
  list-style: none;
  height: 100vh;
  width: 100vw;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
}

.nav-link {
  color: #fff;
  text-decoration: none;
  font-size: 3rem;
  font-weight: 700;
}

.nav-link:hover,
.nav-link:focus {
  color: #ffe600;
}

/* style the html entity for cross */
.close-nav {
  border: 0;
  background: 0;
  color: #ffe600;
  font-size: 3rem;
  font-weight: 700;
  cursor: pointer;
  /* give padding so that area surrounding cross entity can increase, then its click area will also increase, pointer cursor will be shown long before user reaches the cross */
  padding: 0.5em;
  /* pull the cross out of the flow so that it cannot affect position of the nav links */
  position: absolute;
}

/************************
      general layout
************************/

/* sections with main-grid class will have 3 columns for smaller screen and 5 columns for larger screen */
/* for smaller screen, using minmax(1em, 1fr) set first and last columns of min 1em width which will act as min padding beside content but max padding can be acc to screen width. Then using minmax(0px, 500px) set maximum width for middle column */
.main-grid {
  display: grid;
  grid-template-columns: minmax(1em, 1fr) minmax(0px, 500px) minmax(1em, 1fr);
  gap: 0 2em;
}

/* for larger screen, width of content inside middle column should increase, so replace the single middle column with 3 columns of fixed minimum and maximum acc. to screen width, now content will take 2 or 3 of these new columns */
@media screen and (min-width: 600px) {
  .main-grid {
    grid-template-columns: minmax(1em, 1fr) repeat(3, minmax(150px, 320px)) minmax(
        1em,
        1fr
      );
  }
}

/************************
        hero section
************************/

.hero {
  color: #fff;
  background-image: url(../img/hero-bg.jpg);
  /* backup color if background image cannot load */
  background-color: #404040;
  /* background image will cover whole area but will remove extra parts */
  background-size: cover;
  /* image goes to bottom with screen change, prevent it by fixing the image position at bottom */
  background-position: bottom;
  /* give height using padding, to keep containers responsive, never use height property for containers otherwise for small screen widths, content will come out of it */
  padding: 4em 0;
}

/* hero section has main-grid class, so hero is a grid container. For smaller screen, every element inside hero section should take middle column, * selects just html elements so this excludes background image of hero section, as it is not coming from html */
.hero > * {
  grid-column: 2 / -2;
}

/* for larger screen, everything inside hero section should take 2 columns from middle, starting from grid line number 2 */
@media (min-width: 600px) {
  .hero {
    /* increase hero section height by using padding */
    padding: 6em 0;
  }

  .hero > * {
    grid-column: 2 / span 2;
  }
}

/************************
        info section
************************/
/* info section has main-grid class, so info is a grid container. For mobile view, inside info section each grid item named col should take middle column, as no width, height is set for it so by default it will stretch, could have been understood better using border and small content inside any col */
.col {
  grid-column: 2 / -2;
}

.info {
  padding: 3em 0;
  text-align: center;
}

/* trick : for larger screen, there are 5 columns, we want each col to take 1 column from middle 3 columns, so set each col to take 1 column and tell first col to start from 2nd column, then rest of the cols will automatically take next columns */
@media (min-width: 600px) {
  .col {
    grid-column: span 1;
  }

  .col:first-child {
    grid-column: 2 / span 1;
  }
}

/************************
        footer
************************/

.footer {
  background: #ebebeb;
  padding: 3em 0;
  text-align: center;

  grid-template-areas: ". social ." ". main .";
}

/* footer also has main-grid, so footer is a grid container. For smaller screen, logo-text and social icon grid item sections should come one below another inside middle column. These grid item sections also get stretched by default */
.footer-main,
.social-list {
  grid-column: 2 / -2;
}

.footer-main {
  grid-area: main;
}

.footer-logo,
.footer-text,
.footer-fineprint {
  opacity: 0.5;
}

.footer-text {
  margin: 1em 0 2em;
}

.footer-fineprint {
  font-size: 0.75rem;
}

.social-list {
  list-style: none;
  display: flex;
  justify-content: center;
  margin-bottom: 2em;
  grid-area: social;
}

.social-link {
  font-size: 1.5rem;
  color: #000;
  margin-right: 1em;
}

.social-link:hover {
  color: #777;
}

@media (min-width: 600px) {
  .footer {
    grid-template-areas: ". main main social .";
  }

  .footer-main {
    text-align: left;
  }

  .social-list {
    /* social-list is a flex container plus a grid item, so to align its content horizontally, we can either use justify-content (for flex container) or justify-self (for grid item), on another note, remember justify-self is not valid for flex items */
    justify-content: flex-end;
    /* justify-self: end; */
  }
}
